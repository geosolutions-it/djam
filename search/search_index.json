{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DJAM","text":"<p>Django Access Management, implementing OpenID Identity Provider and custom Privilege Management System</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>These instructions will get you a copy of the project up and running on your local machine for development and testing purposes. See deployment for notes on how to deploy the project on a live system.</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>An SMTP email server</li> <li>Python 3.8+ (tested in Python 3.10)</li> <li>PostgreSQL 11.0+</li> <li>RabbitMQ 3.8+</li> </ul> <p>The environment dependencies can be installed in dockerized version, e.g for RabbitMQ:</p> <pre><code>docker run -d -p 15672:15672 -p 5672:5672 -p 5671:5671 --hostname localhost rabbitmq:3-management\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<p>Clone git repository</p> <pre><code>git clone git@github.com:geosolutions-it/djam.git\n</code></pre> <p>Create environment configuration for Djam. Make sure DJAM_PROJECT_ENVIRONMENT is set to 'local',  to set DEBUG mode and not to require ALLOWED_HOSTS definitions.</p> <p>To create the environment configuratino for DJAM create an .env file in the root directory: DJAM&gt;&gt;.env and include the confituration there. An example of the .env file is presented below:</p> <pre><code>DJAM_PROJECT_ENVIRONMENT=local\nDJAM_RABBITMQ_HOST=...  (default=localhost)\nDJAM_RABBITMQ_PORT=...  (default=5672)\nDJAM_DB_HOST=&lt;DB host e.g 127.0.0.1&gt;\nDJAM_DB_PORT=...  (default=5432)\nDJAM_DB_NAME=&lt;djam db&gt;\nDJAM_DB_USER=&lt;djam user&gt;\nDJAM_DB_PASSWORD=&lt;db password&gt;\nDJAM_EMAIL_HOST=...\nDJAM_EMAIL_PORT=...\nDJAM_EMAIL_HOST_USER=...\nDJAM_EMAIL_HOST_PASSWORD=...\nAPIKEY_EXPIRE_DAYS=... (The expiration timedelta of the keys in days. The default value is 30)\n</code></pre> <p>Afterwards, from the root folder of the DJAM repository, run the following command to prepare the environment:</p> <pre><code>set -a &amp;&amp; . ./.env &amp;&amp; set +\n</code></pre> <p>Create virtualenv in djam directory</p> <pre><code>python3 -m venv venv\n</code></pre> <p>Activate virtualenv, install requirements and navigate to project source dir</p> <pre><code>source venv/bin/activate\npip install -r requirements.txt\ncd project\n</code></pre> <p>Optionally run project checks, to see if everything is as expected. If any errors occur correct them before continuation.</p> <pre><code>python manage.py check\n</code></pre> <p>Migrate your app</p> <pre><code>python manage.py migrate\n</code></pre> <p>Create your app's superuser</p> <pre><code>python manage.py createsuperuser\n</code></pre> <p>Create your OpenID provider a pair of private - public keys</p> <pre><code>python manage.py creatersakey\n</code></pre> <p>Run dramatiq queue - this process should be active for the whole application lifetime</p> <pre><code>python manage.py rundramatiq\n</code></pre> <p>For development purposes - in a new terminal start django dev server</p> <pre><code>python manage.py runserver 0.0.0.0:8000\n</code></pre> <p>From now on you can start working with your application. To add OpenID client navigate to <code>http://localhost:8000/admin</code> and in OPENID CONNECT PROVIDER add row to Clients table.</p> <p>You can also check User registration form at <code>http://localhost:8000/register</code>. REMEMBER: to register the User you first need update <code>djam/project/conf/local/email.py</code> configuration file with SMTP server credentials.   </p>"},{"location":"#configuration","title":"Configuration","text":"<p>DJAM can be configured with the following environmental variables:</p> <ul> <li><code>SITEURL</code>: URL of the DJAM service (default=localhost)</li> <li><code>DJAM_PROJECT_ENVIRONMENT</code>: \"prod\" | \"dev\"</li> <li><code>DJAM_SECRET_KEY</code>: secret key used by crypto functionalities in DJAM (see Django SECRET KEY for additional information)</li> <li><code>DJAM_APIKEY_EXPIRE_DAYS</code>: The expiration timedelta of the API Keys in days. The default value is 30</li> <li><code>DJAM_SHOW_API_KEYS_IN_DASHBOARD</code>: Show users API Keys inside the User Resources section</li> <li><code>DJAM_SHOW_UPSTREAM_SERVICES_IN_DASHBOARD</code>: Show list of authenticated proxy services available to the user inside the User Resources section</li> <li><code>DJAM_REQUIRE_SECURE_HTTP_FOR_GEOSERVER_INTROSPECTION</code>: Allow authentication requests from non-secure (no SSL) Geoserver hosts (defaul \"True\")</li> <li><code>DJAM_EMAIL_HOST</code>: SMTP host for the email verification and activation of new accounts. This is used only if self-registration is enabled (disabled by default)</li> <li><code>DJAM_EMAIL_PORT</code>: SMTP port</li> <li><code>DJAM_EMAIL_HOST_USER</code>: SMTP username</li> <li><code>DJAM_EMAIL_HOST_PASSWORD</code>: SMTP password</li> <li><code>DJAM_DB_HOST</code>: hostname of the PostgreSQL DB Server</li> <li><code>DJAM_DB_PORT</code>: port of the PostgreSQL DB Server  (default=5432)</li> <li><code>DJAM_DB_NAME</code>: PostgreSQL DB name for DJAM</li> <li><code>DJAM_DB_USER</code>: DJAM PostgreSQL DB username</li> <li><code>DJAM_DB_PASSWORD</code>: DJAM PostgreSQL DB password</li> <li><code>DJAM_RABBITMQ_HOST</code>: hostname of the RabbitMQ Service  (default=localhost)</li> <li><code>DJAM_RABBITMQ_PORT</code>: port of the RabbitMQ Service  (default=5672)</li> </ul>"},{"location":"#api-documentation-swagger","title":"API Documentation - Swagger","text":"<p>To create the corresponding schema.yml for the API documentation (Swagger) run the following command:</p> <pre><code>python manage.py spectacular --color --file schema.yml\n</code></pre> <p>Afterwards, Swagger front-end should exist in the following URL: <code>http://localhost:8000/openid/api/schema/swagger-ui/</code></p>"},{"location":"#side-notes","title":"Side notes","text":"<ul> <li>To properly read data from Token Info endpoint the client has to have <code>token_introspection</code> and their ID present in the available scopes (/admin -&gt; Clients model -&gt; Scopes) </li> <li>OpenId Provider defines additional scope <code>user_id</code> for accessing User's database ID. This feature usage should be as limited as possible, for now it is present for Allauth simple integration.</li> <li>To integrate certain Geoserver flows: <code>/roles</code>, <code>/users</code>, and <code>adminRole</code> endpoint access is required. These endpoints are protected with API key, which should be passed as Authorization header in a format: <code>apiKey {key}</code>. Generating API key can be done in the admin page -&gt; <code>API KEY PERMISSIONS</code> -&gt; <code>API keys</code> -&gt; <code>Add</code> </li> </ul>"},{"location":"#running-the-tests","title":"Running the tests","text":"<p>In the <code>project</code> folder simply run:</p> <p><code>./run_tests.sh</code></p> <p>To generate a html report simply run:</p> <p><code>coverage html</code></p> <p>And to view something like:</p> <p><code>firefox htmlcov/index.html</code></p> <p>To regenerate the coverage badge, simply run this in the project folder:</p> <p><code>coverage-badge -o ../coverage.svg</code></p>"},{"location":"#deployment","title":"Deployment","text":"<p>The easiest deployment strategy is to create a docker container using Dockerfile from the main project directory. Docker container sets up uWSGI server (which connects with <code>http-socket = :8000</code>) along with <code>python manage.py rundramatiq</code> command.</p> <p>Remember to properly set configuration, especially DJAM_DB_HOST and DJAM_RABBITMQ_HOST when running the dockerized aplication.</p> <ul> <li>Build docker image: <code>docker build . -t djam</code></li> <li>Start docker container: <code>docker run -e DJAM_DB_HOST=192.168.x.x -e DJAM_RABBITMQ_HOST=192.168.x.x -p 8000:8000 djam</code></li> </ul> <p>The container sets up a uWSGI server along with dramatiq On the start of the docker container <code>python manage.py collectstatic</code> and <code>python manage.py migrate</code> commands are performed.</p> <p>Static files have to be served separately using e.g. Nginx. The static files are located in <code>/djam/project/static</code> container directory.</p>"},{"location":"#postgres-with-docker-deployment","title":"Postgres with Docker deployment","text":"<p>When setting up Postgresql, make sure proper permissions are set to access the database from docker. You have to check pg_hba.conf and postgresql.conf files.</p> <p>For Postgres on the host machine:</p> <ul> <li>pg_hba.conf -&gt; add a row for docker0 address from <code>ip a</code></li> <li>postgresql.conf -&gt; uncomment line and allow all, or just specific listen_addresses <code>listen_addresses = '*'</code></li> </ul>"},{"location":"#versioning","title":"Versioning","text":"<p>We use SemVer for versioning. For the versions available, see the tags on this repository. </p>"},{"location":"#linting-setup","title":"Linting Setup","text":"<p>As a prerequisite in your virtualenv run <code>pip install -r requirements-dev.txt</code></p>"},{"location":"#running-the-linters","title":"Running the linters","text":"<p><code>flake8 project/</code> <code>bandit project/</code></p>"},{"location":"#vscode-integration","title":"Vscode Integration","text":"<p>In your settings.json:</p> <pre><code>{\n    \"python.pythonPath\": \"venv/bin/python\",\n    \"python.linting.flake8Path\": \"venv/bin/flake8\",\n    \"python.linting.banditPath\": \"venv/bin/bandit\",\n    \"python.linting.enabled\": true,\n    \"python.linting.flake8Enabled\": true,\n    \"python.linting.banditEnabled\": true,\n}\n</code></pre>"},{"location":"api-keys/","title":"API Keys","text":""},{"location":"api-keys/#api-keys","title":"API keys","text":"<p>DJAM as identity provider, uses API keys in order to manage and secure its internal functionality and the access to its clients, including a REST API for the API key management (for more information about REST API see this section ). More specifically, DJAM uses two types of keys:</p> <ul> <li>API key with the scope: <code>Resource</code></li> <li>API key with the scope: <code>Management</code></li> </ul> <p>The API key with the scope <code>Resource</code> is used for the access to the clients' resources (e.g GeoServer) while the API Key with the scope: <code>Management</code> is used for the access to the DJAM REST API for the API key management.</p> <p>Both types of API keys can be created using the DJAM administrator site (https://djam_domain/admin) selecting from the menu: <code>IDENTITY PROVIDER</code> &gt;&gt; <code>API keys</code> &gt;&gt; <code>add</code> icon.</p> <p>In the <code>Add Api Key</code> form, the following fields have to be defined:</p> <ul> <li>the <code>user</code> who is the owner of the key</li> <li>The <code>API key</code> itself which is created automatically by DJAM</li> <li>the <code>revoked</code> status. If an API key is set to <code>revoked</code> by selecting the checkbox, the API key is considered inactive</li> <li>the <code>expiry</code> which is the expiration date of the key. If the key is expired cannot be used</li> <li>the <code>scope</code> of the API key in which the user is able to select between the scope <code>Resoure</code> and <code>Management</code> through a dropdown menu</li> </ul> <p></p> <p>It's worth noting that simple users are able to create only their own keys while superusers can create API keys for all the users.</p>"},{"location":"integration-with-geoserver/","title":"Geoserver integration","text":"<p>In this section the configuration of GeoServer in order to be used with DJAM is presented. When GeoServer is used with DJAM, the authentication flow is described as below:</p> <ul> <li>A new Api Key with a specific user (and scope: Resource) is created through the DJAM admin site (as presented in the Api keys section) </li> <li>A request containing the API Key is executed by the user. Example: <code>http://localhost:8080/geoserver/topp/wms?service=WMS&amp;version=1.3.0&amp;request=GetCapabilities&amp;authkey=ef18d7e7-963b-470f-9230-c7f9de166888</code></li> <li>Geoserver extracts the key from the request and asks DJAM to validate it</li> <li>If the key is valid (it\u2019s not expired or revoked) DJAM will respond with the user associated to the key and, optionally, the list of groups (also known as DJAM Teams) the user is member of</li> <li>Geoserver will lookup its internal access rules to allow or deny the request</li> </ul>"},{"location":"integration-with-geoserver/#djam-teams-and-geoserver-roles","title":"DJAM teams and Geoserver roles","text":"<p>Administrators can create DJAM teams (user groups) in DJAM and users to them through the DJAM admin site. When GeoServer is configured to use DJAM, these teams will be automatically mapped to Geoserver roles while the mapping from DJAM teams to Geoserver roles allows creating Geoserver security rules to restrict access to resources based on the Geoserver role and therefore the DJAM team. In other words, administrators are able to manage the access to specific resources of GeoServer by assigning these resources to a GeoServer role (by creating a rule through the GeoServer UI) which is assiged with a specific DJAM team. Thus, all the users who are included in this DJAM team will be able to have access to these resources.</p>"},{"location":"integration-with-geoserver/#geoserver-authkey-module","title":"GeoServer authkey module","text":"<p>For the GeoServer configuration in order to use DJAM, a vanilla GeoServer instance can be utilized while the <code>authkey</code> module of GeoServer is required. This module allows for a very simple authentication protocol designed for OGC clients. For these clients the module allows a minimal form of authentication by appending a unique key in the URL that is used as the sole authentication token. For more information please see the following link. </p> <p>For the <code>authkey</code> module installation, follow the steps below:</p> <ul> <li>Download the <code>geoserver-2.23.2-authkey-plugin.zip</code> extension from the GeoServer extensions archive </li> <li>Unzip the content into the WEB-INF/lib folder of the GeoServer web application.</li> <li>Restart GeoServer</li> <li>From the GUI as administrator, go to \u201cSecurity\u201d, \u201cAuthentication\u201d Clicking on \u201cAdd New Authentication Filter\u201d. The <code>authkey</code> module should be available</li> </ul> <p></p>"},{"location":"integration-with-geoserver/#protecting-resources-through-the-authentication-key-module","title":"Protecting Resources through the Authentication Key module","text":""},{"location":"integration-with-geoserver/#configure-the-role-service","title":"Configure the Role Service","text":"<p>This is the service that is used by Geoserver to retrieve the list of roles (DJAM Teams). The list is updated each time the service is queried by the other Geoserver modules and services (Authentication filter, Data security, etc.) for the list of roles.</p> <ul> <li>From the GUI as administrator, go to \u201cSecurity\u201d, \u201cUsers, Groups, and Roles\u201d</li> <li>Click \u201cAdd new\u201d under Role Services</li> <li>Fill the fields according to the following image, with the USers JSON Path populated with: <code>$.users[?(@.username=='${username}')].groups</code></li> </ul> <p></p>"},{"location":"integration-with-geoserver/#configure-the-user-groups-service","title":"Configure the User Groups Service","text":"<p>This service will be used by the Authentication Key Provider to map authenticated users and groups. </p> <ul> <li>From the GUI as administrator, go to \u201cSecurity\u201d, \u201cUsers, Groups, and Roles\u201d</li> <li>Click \u201cAdd new\u201d under User Group Services </li> <li>Fill the fields according to the following image, with the Web Search Response Roles Search Regualr expression populated with: <code>^.*?\"groups\"\\s*:\\s*\\[\"([^\"]+)\"\\].*$</code></li> <li>Select the Role service created before</li> </ul> <p></p>"},{"location":"integration-with-geoserver/#configure-the-authentication-key-provider","title":"Configure the Authentication Key Provider","text":"<ul> <li>From the GUI as administrator, go to \u201cSecurity\u201d, \u201cAuthentication\u201d</li> <li>Clicking on \u201cAdd New Authentication Filter\u201d, we should be able to see the module available</li> <li>Select <code>AuthKey</code></li> <li>Provide a <code>Name</code> for the provider</li> <li>Change the name of the URL parameter to be used to identify the keys; the default one for DJAM is \u201cauthkey\u201d, meaning that the requests will be in the form: <code>http://....?...&amp;authkey=&lt;the_user_key&gt;</code></li> <li>Select \u201cWeb Service\u201d as authentication user mapper. This will configure Geoserver to use DJAM as the external authentication service. Fill in the values reported in the picture below.</li> <li>Fill the field \u201cWeb Service Response User Search Regular Expression\u201d, with the following:  ^.?\\\"username\\\"\\s:\\s\\\"([^\\\"]+)\\\".$</li> <li>Select \u201cdjam_groupservice\u201d (created before) as \u201cUser/Group Service\u201d</li> </ul>"},{"location":"integration-with-geoserver/#adding-the-new-authentication-filter-to-the-filter-chains","title":"Adding the new authentication filter to the \u201cFilter Chains\u201d","text":"<p>The next step is to add the new authentication filter to the \u201cFilter Chains\u201d. \"Filter Chains\" exist in the same page as Authentication filters: \u201cSecurity\u201d, \u201cAuthentication\u201d. Thus, from the panel of \"Filter Chains\" select <code>web</code>, <code>rest</code>, <code>gwc</code> and <code>default</code> accordingly, and move the new authentication filter on the right panel while the <code>basic</code> filter on the left panel as the following images: </p> <p> Web  REST  GWC  Default </p> <p>Note: It is important to always \u201cSave\u201d all the changes. Click on all the \u201cSave\u201d buttons when finished updating the filters until back to the GeoServer home page. Double check that the configuration has been correctly saved.</p>"},{"location":"integration-with-geoserver/#protecting-workspaces-and-layers","title":"Protecting Workspaces and Layers","text":""},{"location":"integration-with-geoserver/#verify-the-list-of-roles-djam-teams-are-retrieved-from-geoserver","title":"Verify the list of roles (DJAM Teams) are retrieved from Geoserver","text":"<ul> <li>From the GUI as administrator, go to \u201cSecurity\u201d, \u201cUsers, Groups, and Roles\u201d</li> <li>Switch to the \u201cRoles\u201d tab</li> <li>Click \u201cdjam_roleservice\u201d to expand the list of available roles</li> <li>The list of DJAM Teams should appear, where the team name is prefixed with \u201cROLE_\u201d</li> </ul>"},{"location":"integration-with-geoserver/#create-and-manage-the-security-rules","title":"Create and manage the security rules","text":"<p>Last step is to protect the workspaces and layers for the specific roles by creating new rules. The logic on how those rules works is the following one:</p> <ul> <li>Apply the more generic rule</li> <li>Unless a specific one has been found</li> </ul> <p></p> <p>To create a new rule, select <code>new rule</code>, from the \u201cSecurity\u201d, \u201cData\u201d section and then:</p> <ul> <li>select the workspace and its corresponding store </li> <li>move the role that you created above (e.g ROLE_djam1) to the right panel (<code>selected roles</code>).</li> <li>save the new rule.</li> </ul> <p>NOTE: The ROLES are derived by GeoServer automatically once a Users has added to a Group or assigned to a specific Role.</p>"},{"location":"integration-with-geoserver/#access-to-the-wms-service","title":"Access to the WMS service","text":"<p>Now the GeoServer is configured and can be tested by trying to access a protected layer with a user beloging to a specific team (for DJAM), or role (for GeoServer) (e.g DJAM_group1).</p> <p>You can test by using a WMS GetMap query as the following:</p> <p>http://localhost:8080/geoserver/&lt;workspace&gt;/wms?service=WMS&amp;version=1.1.0&amp;request=GetMap&amp;layers=&lt;workspace&gt;%3A&lt;store&gt;&amp;bbox=&lt;bbox coordinates&gt;&amp;width=&lt;width in pixels&gt;&amp;height=&lt;height in pixels&gt;&amp;srs=EPSG%3A3857&amp;styles=&amp;format=application/openlayers&amp;authkey=&lt;a valid resource key&gt;</p> <p>If the resource key is valid (it is not expired or revoked), the layer should be displayed.</p>"},{"location":"integration-with-geoserver/#basic-auth-credentials-validation","title":"Basic Auth credentials validation","text":"<p>To be able to use Basic Auth authentication from in Geoserver with credentials vaildation in Djam this feature of Geoserver is required.</p> <p>Another method of authenticating requests in Geoserver is User credentials validation by Djam. To do so you need to make a GET request to a view named <code>user_credentials_introspection</code> with parameters <code>u</code> (user's username - by default it's their email) and <code>p</code> (user's password).</p> <p>Generally, usage of this authentication method is discouraged. It should only be used in certain, controlled environments. When using this  flow in a production environment, make sure <code>REQUIRE_SECURE_HTTP_FOR_GEOSERVER_INTROSPECTION</code> setting is <code>True</code>  (djam/project/conf/prod/identity_provider.py).</p>"},{"location":"proxy/","title":"Authenticated Proxy services","text":"<p>DJAM provides a proxy service that allows to expose upstream HTTP(S) endpoints behind authentication and authorization rules.</p>"},{"location":"proxy/#service-configuration","title":"Service configuration","text":"<p>An upstream service can be configured by creating a new <code>Resource</code> from the Django Admin.</p> <p>A <code>Resource</code> for a proxied service consists of the URL to the upstream service, a name (<code>slug</code>), an optional description and the list of <code>Roles</code> (see below) allowed to perform requests to the service.</p> <p>At the moment only \"Upstream Service\" resource types are supported, but this model is generic and can be used by new modules in the future and custom DJAM modules.</p> <p></p>"},{"location":"proxy/#roles","title":"Roles","text":"<p><code>Roles</code> define a model to assign <code>Access Rules</code> to <code>Resources</code> ((in this case the upstream service)) to users and teams .</p> <p>A <code>Role</code> can be created through the Django Admin.</p> <p></p>"},{"location":"proxy/#access-rules","title":"Access Rules","text":"<p><code>Access Rules</code> assign <code>Roles</code> to <code>Resources</code>. Users and teams assigned to a role for which an access rule exists and is active for a resource, are allowed to access it.</p> <p>An <code>Access Rule</code> can be created through the Django Admin.</p> <p></p>"},{"location":"rest-api/","title":"REST API for API key management","text":"<p>As mentioned to the section <code>API keys</code>, DJAM allows to the users to have two types of API keys: </p> <ul> <li>API keys with scope: Management. These keys are used for the access to the REST API which is described in this section</li> <li>API keys with scope: Resource. They are used for the access to the clients' resources (e.g GeoServer)</li> </ul> <p>Note: For the sake of simplicity in this section the API keys with scope: Management will be called <code>management keys</code> and the API keys with scope: Resource will be called <code>resource keys</code>.</p> <p>Each <code>resource key</code> includes two important parameters: (a) an expiration date (<code>expiry</code>) and (b) a <code>revoked</code> value which denotes if this resource key is active or not, while one user is able to have many resource keys. Thus, to facilitate the management of the resource keys, users are able to use a REST API in order to apply several operations in terms of API key management.</p>"},{"location":"rest-api/#management-operations-of-the-api-key-management","title":"Management operations of the API key management","text":"<p>The main operations for the API key management are described below:</p> <ul> <li>List: It outputs the list of a user's resource keys</li> <li>Create: It creates a new Api Key with <code>resource</code> scope</li> <li>Status: It returns the status of an Api Key, i.e. its revoked status and the expiration date</li> <li>Revoke: It modifies the <code>revoked</code> value of a resource key. When the <code>revoked</code> is defined as <code>True</code>, the corresponding API key is deactivated.</li> <li>Renew: The ApiKey expiration date is extended. The defined expiration date cannot exceed the max expiration period of six months. If the datetime is not defined, the ApiKey will be extended for 30 days.</li> <li>Rotate: The old ApiKey is revoked while a new ApiKey is created and returned to the user. The old API Key expiration date can be extended for three days more as a rollout time window by defining the <code>short_expiry</code> parameter as True.</li> </ul> <p>It's worth noting that all the operations above can be applied as <code>POST</code> requests while they are developed in separated endpoints:</p> <ul> <li>List: Endpoint <code>/key_list</code></li> <li>Create: Endpoint <code>/create_key</code></li> <li>Status: Endpoint <code>/status</code></li> <li>Revoke: Endpoint <code>/revoke</code></li> <li>Renew: Endpoint <code>/renew</code></li> <li>Rotate: Endpoint <code>/rotate</code></li> </ul>"},{"location":"rest-api/#how-to-use-of-the-rest-api","title":"How to use of the REST API","text":"<p>The REST API can be used in two ways:</p> <ul> <li>By utilizing a tool for sending HTTP requests like cURL, PostMan, etc</li> <li>By using the API documentation which is a Swagger frontend</li> </ul> <p>In both ways, a management key (a key with scope: <code>Management</code>) have to be defined in the <code>header</code>, in order to have access to the REST API with the following format: </p> <p><code>Token &lt;management key&gt;</code> </p> <p>It's worth noting that as the resource keys, management keys have to be valid in terms of <code>expiration date</code> and the <code>revoked</code> value. </p> <p>Also, all the parameters which have to be defined are included inside the body of the request in a JSON format.</p>"},{"location":"rest-api/#curl-usage","title":"CURL usage","text":"<p>If we want to use cURL in order to use the REST API, the following format should be followed:</p> <pre><code>curl -X POST -H \"Authorization: Token &lt;management key&gt;\" -H \"Content-Type: application/json\" -d '{\"param1\":\"value1\", \"param2\":\"value2\"}' http://&lt;DJAM_domain&gt;/openid/api/token/&lt;API endpoint&gt;/\n</code></pre>"},{"location":"rest-api/#swagger-front-end-usage","title":"Swagger front-end usage","text":"<p>Another way to use the REST API is to use the Swagger front-end, in which each endpoint is included in a dropdown menu, where the user is able to define the parameters in a JSON format. It's worh noting that for a successful use of the API, users have to insert their <code>management key</code> (with the same format as above) by selecting the <code>padlock</code> icon on the right of each dropdown menu.</p> <p> </p> <p>Each endpoint (in a dropdown menu) includes a short description while users are able to define the endpoint's parameters in a JSON format. By selecting the <code>Execute</code> button, the request will be performed.</p> <p></p> <p>The swagger front-end is available to the following URL: <code>http://&lt;DJAM_domain&gt;/openid/api/schema/swagger-ui/</code></p>"},{"location":"rest-api/#a-note-for-the-administrators-superusers","title":"A note for the administrators / superusers","text":"<p>Although users are able to manage only their own resource keys, administrators / superusers are able to manage all the resource keys through this REST API. Thus, superusers are able to define the user / account for a specific operation that they have to perform by using a parameter called <code>account_id</code>. For instance, if a superuser wants to output the status of a resource key which is owned by a user with <code>ID=4</code>, superuser can run:</p> <pre><code>curl -X POST -H \"Authorization: Token &lt;management_key&gt;\" -H \"Content-Type: application/json\" -d '{\"account_id\":4, \"resource_key\":\"&lt;resource key&gt;\"}' http://&lt;DJAM_domain&gt;/openid/api/token/status/\n</code></pre> <p>It's worth noting that if the specified resource key is not owned by the user with the specified account, DJAM will not allowed the operation to be perfomed successfully.</p>"},{"location":"rest-api/#rest-api-endpoints","title":"REST API endpoints","text":"<p>In this section, each API endpoint is described in detail with examples and expected results.</p>"},{"location":"rest-api/#list","title":"List","text":"<p>The user is able to export her/his keys with resource scope.</p>"},{"location":"rest-api/#parameters","title":"Parameters","text":"<p>For the simple users, there are no parameters in this endpoint except the parameter: <code>account_id</code> which can be used only by the superusers.</p>"},{"location":"rest-api/#example","title":"Example:","text":"<pre><code>curl -X POST -H \"Authorization: Token &lt;management key&gt;\" -H \"Content-Type: application/json\" http://&lt;DJAM_domain&gt;/openid/api/token/key_list/\n</code></pre> <p>Expected results:</p> <pre><code>{\"tokens of george@gmail.com\": [&lt;key1&gt;, &lt;key2&gt;, &lt;key3&gt;, ...]}\n</code></pre>"},{"location":"rest-api/#create","title":"Create","text":"<p>The user is able to create a key with resource scope.</p>"},{"location":"rest-api/#parameters_1","title":"Parameters","text":"<ul> <li>\"revoked\": \"True or False\"</li> <li>\"expiry\": \"2024-10-25T07:14:38.520290Z\",</li> <li>\"account_id\": null (for superusers)</li> </ul> <p>None of the parameters are required. If the parameters are not defined in the request, DJAM will use their default values.</p>"},{"location":"rest-api/#example_1","title":"Example:","text":"<pre><code>curl -X POST -H \"Authorization: Token &lt;management key&gt;\" -H \"Content-Type: application/json\" -d '{\"revoked\": \"False\"}' http://&lt;DJAM_domain&gt;/openid/api/token/create_key/\n</code></pre> <p>Expected results:</p> <pre><code>{\"username\": \"george@gmail.com\", \"token\": \"&lt;new resource key&gt;\", \"id\": 131, \"created\": \"success\"}\n</code></pre>"},{"location":"rest-api/#status","title":"Status","text":"<p>The user is able to export the status of a resource key.</p>"},{"location":"rest-api/#parameters_2","title":"Parameters","text":"<ul> <li>\"resource_key\": \"string\"</li> <li>\"account_id\": null (for superusers)</li> </ul> <p>The parameter <code>resource_key</code> is required since a valid resource key has to be defined.</p>"},{"location":"rest-api/#example_2","title":"Example:","text":"<pre><code>curl -X POST -H \"Authorization: Token &lt;management key&gt;\" -H \"Content-Type: application/json\" -d '{\"resource_key\":\"&lt;resource key&gt;\"}' http://DJAM_domain/openid/api/token/status/\n</code></pre> <p>Expected results:</p> <pre><code>{\"username\": \"george@gmail.com\", \"key\": \"&lt;resource key&gt;\", \"id\": 30, \"revoked\": true, \"expiration date\": \"2024-10-14T09:36:00Z\"}\n</code></pre>"},{"location":"rest-api/#renew","title":"Renew","text":"<p>The user is able to renew the expiration date of a resource key.</p>"},{"location":"rest-api/#parameters_3","title":"Parameters","text":"<ul> <li>\"resource_key\": \"string\"</li> <li>\"expiry\": \"2024-10-25T07:14:38.520725Z\",</li> <li>\"account_id\": null (for superusers)</li> </ul> <p>The parameter <code>resource_key</code> is required since a valid resource key has to be defined. If the expirition date is not defined a default expiration date of 30 days will be defined.</p>"},{"location":"rest-api/#example_3","title":"Example:","text":"<pre><code>curl -X POST -H \"Authorization: Token &lt;management key&gt;\" -H \"Content-Type: application/json\" -d '{\"resource_key\":\"&lt;resource key&gt;\", \"expiry\": \"2024-12-13T09:37:00.000Z\"}' http://&lt;DJAM_domain&gt;/openid/api/token/renew/\n</code></pre> <p>Expected results:</p> <pre><code>{\"username\": \"george@gmail.com\", \"key\": \"&lt;resource key&gt;\", \"id\": 48, \"New expiration date\": \"2024-12-13T09:37:00Z\"}\n</code></pre>"},{"location":"rest-api/#revoke","title":"Revoke","text":"<p>The user is able to revoke her/his resource key</p>"},{"location":"rest-api/#parameters_4","title":"Parameters","text":"<ul> <li>\"resource_key\": \"string\"</li> <li>\"revoked\": \"True or False\",</li> <li>\"account_id\": null (for superusers)</li> </ul> <p>The parameters <code>resource_key</code> and <code>revoked</code> are required. If the <code>revoked</code> value is not defined a message: <code>Please set a revoked value</code> will be returned.</p>"},{"location":"rest-api/#example_4","title":"Example:","text":"<pre><code>curl -X POST -H \"Authorization: Token &lt;management key&gt;\" -H \"Content-Type: application/json\" -d '{\"resource_key\":\"&lt;resource key&gt;\", \"revoked\": \"True\"}' http://&lt;DJAM_domain&gt;/openid/api/token/revoke/\n</code></pre> <p>Expected results:</p> <pre><code>{\"username\": \"george@gmail.com\", \"key\": \"&lt;resource key&gt;\", \"id\": 48, \"new revoked value\": \"True\"}\n</code></pre>"},{"location":"rest-api/#rotate","title":"Rotate","text":"<p>The user is able to revoke an old resource key and create a new one. Optionaly she/he can extend the expiration date of her/his old resource key for three days by setting the \"short_expiry\" to True.</p>"},{"location":"rest-api/#parameters_5","title":"Parameters","text":"<ul> <li>\"resource_key\": \"string\"</li> <li>\"short_expiry\": \"True or False\",</li> <li>\"account_id\": null (for superusers)</li> </ul> <p>The parameter <code>resource_key</code> is required since a valid resource key has to be defined. If the <code>short_expiry</code> value is not defined, the False value will be defined by default.</p>"},{"location":"rest-api/#example_5","title":"Example:","text":"<pre><code>curl -X POST -H \"Authorization: Token &lt;management key&gt;\" -H \"Content-Type: application/json\" -d '{\"resource_key\":\"&lt;resource key&gt;\", \"short_expiry\": \"True\"}' http://&lt;DJAM_domain&gt;/openid/api/token/rotate/\n</code></pre> <p>Expected results:</p> <pre><code>{\"message\": \"The old key: &lt;resource key&gt; with id: 48 is revoked and extended for 3 days\", \"username\": \"george@gmail.com\", \"new_key\": \"&lt;new resource key&gt;\", \"id\": 132}\n</code></pre>"},{"location":"rest-api/#authentication-authorization","title":"Authentication / Authorization","text":"<p>DJAM includes authentication and authorization functionality in order to manage and control the access to the REST API and as a consequence, to the clients' resources.</p> <p>In this section, the main authentication and authorization constraints are presented including the expected results.</p>"},{"location":"rest-api/#authentication","title":"Authentication","text":"<p>As mentioned above, the users are able to access the REST API by using a valid management key which is included in the header of the request.</p> <p>When a request is performed DJAM performs the following checks in terms of management key's validity:</p> <ul> <li>Check if the management key exists in the header of the request. If it doesn't exist the following response will be returned:</li> </ul> <pre><code>status code: 401 (Unauthorized)\n\n{\n  \"detail\": \"Invalid token header. No credentials provided.\"\n}\n</code></pre> <ul> <li>If the key exists in the header, it checks if it is owned by a specific user. If no, the following response will be returned:</li> </ul> <pre><code>status code: 401 (Unauthorized)\n\n{\n  \"detail\": \"Invalid token.\"\n}\n</code></pre> <ul> <li>Check if the defined key is a key with scope: Resource. If the key is not a management key but a resource key, the following response will be returned:</li> </ul> <pre><code>status code: 401 (Unauthorized)\n\n{\n  \"detail\": \"Invalid token.\"\n}\n</code></pre> <ul> <li>Check if the key is expired. If yes, the following response will be returned:</li> </ul> <pre><code>status code: 401 (Unauthorized)\n\n{\n  \"detail\": \"Permissions error: Your token as been expired. Please renew it !\"\n}\n</code></pre>"},{"location":"rest-api/#authorization","title":"Authorization","text":"<p>After the authentication of the user, DJAM has to test the user permissions, the validity of the resource key and the expiration date when the corresponding parameters are required.</p>"},{"location":"rest-api/#resource-key-verification","title":"Resource key verification","text":"<p>During a request which requres a resource key, DJAM peforms the following checks:</p> <p>Note The resource key verification is not applied to the endpoints: /create_key and /key_list because these actions don\u2019t require a resource key.</p> <ul> <li>If the user is superuser, DJAM checks if the specified user (by defining the <code>account_id</code>) owns the specified resource_key. If not, the following response will be returned:</li> </ul> <pre><code>{\"detail\":\"No access permissions or invalid resource key\"}\n</code></pre> <ul> <li>Check if the user which sends the request (the user is retrieved by the management key during authentication), owns the specified resource key. If not, or if the field is empty or incorrect, the following response will be returned:</li> </ul> <pre><code>{\"detail\":\"No access permissions or invalid resource key\"}\n</code></pre> <ul> <li>Check if the specified resource key is defined with the scope: <code>Resource</code>. If it is a management key, the following response will be returned:</li> </ul> <pre><code>Status code: 403\n{\n  \"detail\": \"No access permissions or invalid resource key\"\n}\n</code></pre>"},{"location":"rest-api/#datetime-verification","title":"Datetime verification","text":"<p>In the endpoints <code>/create_key</code> and <code>/renew</code>, the user is able to set an expiration datetime. Thus, DJAM performs a datetime verification which includes the following checks:</p> <ul> <li>Check, if a defined datetime is in the past. If yes, the following reponse will be returned:</li> </ul> <pre><code>Status code: 403\n{\n  \"detail\": \"Invalid format or expiration date.\"\n}\n</code></pre> <ul> <li>Check if the format of the datetime is incorrect. If yes, the following response will be returned:</li> </ul> <pre><code>Status code: 403\n\n{\n  \"detail\": \"Invalid format or expiration date.\"\n}\n</code></pre> <ul> <li>Check if the expiration datetime exceeds the 180 days. If yes, the following reponse will be returned:</li> </ul> <pre><code>Status code: 403\n{\n  \"detail\": \"Invalid format or expiration date.\"\n}\n</code></pre>"},{"location":"users-teams/","title":"Users and Teams","text":"<p>The following sections explain the two available models for DJAM accounts and their grouping in teams.</p>"},{"location":"users-teams/#users","title":"Users","text":"<p>DJAM User is the model for the management of a DJAM account. New accounts can be created from the Django Administration interface. A username (email) and password are assigned to users to allow their authenticate\u00ecion with DJAM.</p> <p></p> <p>When users authenticate with DJAM they are redirected to theit Account page, which cointains basic account information.</p> <p></p> <p>If DJAM is configured to show the Resources tab, the list of active API Keys and proxy services enabled for the user are listed.</p> <p></p>"},{"location":"users-teams/#teams","title":"Teams","text":"<p>Teams allow to group user accounts. Groups are used by DJAM services for specific purposes: </p> <ul> <li>Geoserver Groups services can use users's teams to map users to its own groups and roles</li> <li>Roles can be assigned to Teams to share access rules to proxied services</li> </ul> <p>Teams can be managed from the Django Admin and users can be assigned to teams from Django Admin user management pages.</p> <p></p>"}]}